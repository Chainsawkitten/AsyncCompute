/*
    Compute shader used to update particles.
*/
#version 430

layout (local_size_x = 1, local_size_y = 1) in;

struct Particle {
    vec4 position;
    vec4 velocity;
};

layout(set = 0, binding = 0) buffer ParticleBuffer {
    Particle particles[];
};

layout(set = 1, binding = 0) uniform UpdateBuffer {
    float deltaTime;
    uint particleCount;
};

void main() {
    uint myID = gl_GlobalInvocationID.x;
    
    // Rule 1.
    vec3 centerOfMass = vec3(0.0, 0.0, 0.0);
    for (uint i=0; i < particleCount; ++i) {
        if (i != myID)
            centerOfMass += particles[i].position.xyz;
    }
    centerOfMass /= particleCount - 1;
    vec3 rule1 = 0.1 * (centerOfMass - particles[myID].position.xyz);
    
    // Update boid.
    particles[myID].velocity += deltaTime * vec4(rule1, 0.0);
    particles[myID].position += deltaTime * particles[myID].velocity;
}
